<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Price Per 100 Unit Comparator</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Set default font and ensure the app takes full screen height */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f4f4f9;
        }

        /* Custom style to make the input area compact and centered at the top half */
        /* Use VH units to ensure the content stays high up, away from the typical keyboard area */
        .compact-container {
            max-width: 95vw;
            margin: 0 auto;
            /* Target area: max height 50vh, centered visually for the tap zone */
            max-height: 50vh;
            padding-top: 5vh;
        }

        /* Style the input fields to be larger and easier to tap */
        .tap-input {
            height: 48px;
            padding: 0 12px;
            text-align: right;
            font-size: 1.125rem; /* text-lg */
        }

        /* Style for the non-input result box */
        .result-box {
            height: 48px;
            padding: 0 12px;
            display: flex;
            align-items: center;
            justify-content: flex-end;
            font-weight: 700; /* font-bold */
            font-size: 1.125rem; /* text-lg */
            background-color: #e5e7eb; /* default light gray */
            color: #1f2937; /* dark text */
            word-break: break-all; /* prevents overflow on small screen */
        }
    </style>
</head>
<body class="min-h-screen">

    <div class="compact-container">
        <h1 class="text-2xl font-extrabold text-center text-gray-800 mb-6">Unit Price Comparison</h1>
        
        <!-- Instruction -->
        <p class="text-center text-sm text-gray-600 mb-6 px-2">Enter Price and Quantity to calculate the Price Per 100 Units.</p>

        <!-- Product Line 1 -->
        <div class="mb-4 p-3 bg-white rounded-xl shadow-lg border-2 border-gray-200">
            <!-- Updated label text to 'Item 1' -->
            <label class="text-xs font-semibold uppercase text-gray-500 mb-1 block">Item 1</label>
            <div class="grid grid-cols-3 gap-2">
                <!-- Price 1 Input -->
                <div class="flex flex-col">
                    <input id="price1" type="number" inputmode="decimal" placeholder="Price (£)" oninput="calculateAndCompare()" 
                           class="tap-input border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full"
                           aria-label="Price for Product 1">
                </div>
                <!-- Quantity 1 Input -->
                <div class="flex flex-col">
                    <input id="quantity1" type="number" inputmode="decimal" placeholder="Qty (g/ml)" oninput="calculateAndCompare()" 
                           class="tap-input border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full"
                           aria-label="Quantity for Product 1">
                </div>
                <!-- Result 1 Display -->
                <div id="result1" class="result-box rounded-lg">
                    0.000000
                </div>
            </div>
            <p class="mt-1 text-xs text-gray-500 text-right">Price / 100 units</p>
        </div>

        <!-- Product Line 2 -->
        <div class="p-3 bg-white rounded-xl shadow-lg border-2 border-gray-200">
            <!-- Updated label text to 'Item 2' -->
            <label class="text-xs font-semibold uppercase text-gray-500 mb-1 block">Item 2</label>
            <div class="grid grid-cols-3 gap-2">
                <!-- Price 2 Input -->
                <div class="flex flex-col">
                    <input id="price2" type="number" inputmode="decimal" placeholder="Price (£)" oninput="calculateAndCompare()" 
                           class="tap-input border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full"
                           aria-label="Price for Product 2">
                </div>
                <!-- Quantity 2 Input -->
                <div class="flex flex-col">
                    <input id="quantity2" type="number" inputmode="decimal" placeholder="Qty (g/ml)" oninput="calculateAndCompare()" 
                           class="tap-input border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full"
                           aria-label="Quantity for Product 2">
                </div>
                <!-- Result 2 Display -->
                <div id="result2" class="result-box rounded-lg">
                    0.000000
                </div>
            </div>
            <p class="mt-1 text-xs text-gray-500 text-right">Price / 100 units</p>
        </div>
    </div>
    
    <script>
        // Global utility to safely parse inputs
        function getFloatValue(id) {
            const element = document.getElementById(id);
            // Use parseFloat on the value, falling back to 0 if it's not a valid number
            return parseFloat(element.value) || 0;
        }

        // Main calculation and comparison function
        function calculateAndCompare() {
            const price1 = getFloatValue('price1');
            const quantity1 = getFloatValue('quantity1');
            const price2 = getFloatValue('price2');
            const quantity2 = getFloatValue('quantity2');

            const resultEl1 = document.getElementById('result1');
            const resultEl2 = document.getElementById('result2');
            
            let ppu1, ppu2;
            
            // --- Calculation Logic ---
            
            // Calculate Price Per 100 Units: (Price / Quantity) * 100
            
            if (price1 > 0 && quantity1 > 0) {
                ppu1 = (price1 / quantity1) * 100;
                // Display the result to six decimal places
                resultEl1.textContent = ppu1.toFixed(6); 
            } else {
                ppu1 = Infinity; // Treat invalid/incomplete as very expensive
                resultEl1.textContent = '0.000000';
            }

            if (price2 > 0 && quantity2 > 0) {
                ppu2 = (price2 / quantity2) * 100;
                // Display the result to six decimal places
                resultEl2.textContent = ppu2.toFixed(6);
            } else {
                ppu2 = Infinity; // Treat invalid/incomplete as very expensive
                resultEl2.textContent = '0.000000';
            }

            // --- Comparison Logic ---
            
            // Function to reset styling
            const resetStyle = (el) => {
                el.classList.remove('bg-green-400', 'text-white', 'shadow-md', 'text-gray-900');
                el.classList.add('bg-gray-200', 'text-gray-800');
            };

            // Function to highlight as cheapest (now using dark text on green)
            const highlightCheapest = (el) => {
                el.classList.remove('bg-gray-200', 'text-gray-800', 'text-white');
                // Changed text-white to text-gray-900 for black/dark text on green background
                el.classList.add('bg-green-400', 'text-gray-900', 'shadow-md');
            };

            // Reset both styles first
            resetStyle(resultEl1);
            resetStyle(resultEl2);

            // Compare PPU1 and PPU2, ignoring Infinity (invalid inputs)
            if (ppu1 !== Infinity || ppu2 !== Infinity) {
                
                if (ppu1 < ppu2) {
                    highlightCheapest(resultEl1);
                } else if (ppu2 < ppu1) {
                    highlightCheapest(resultEl2);
                }
                // If they are exactly equal, no highlighting is applied (both remain gray)
            }
        }

        // Initialize calculation on load to ensure default text is correct
        window.onload = calculateAndCompare;

        // Note on Keyboard: Using type="number" and inputmode="decimal" ensures
        // the Android keyboard (especially on Pixel 6a) defaults to the numeric keypad, 
        // while still allowing multi-digit and decimal input.
    </script>
</body>
</html>
